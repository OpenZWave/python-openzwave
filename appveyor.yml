environment:
  PYPI_USER:
    secure: yna6KiH2GE3Ka1G5a3TlUQ==
  PYPI_PASSWORD:
    secure: UpISOsYyHdCzurReV6FcTA==

  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  matrix:

    # there are only 3 compilers used to compile python
    # Python 3.5, 3.6 and 3.7 were compiled with MSVC 14 (VS2017)
    # Python 3.3 and 3.4 were compiled with MSVC 10 (VS2010)
    # Python 2.6, 2.7, 3.0, 3.1 and 3.2 were compiled with MSVC 9 (VS2008)
    # because of the code incompatibility with python-openzwave and the MSVC 9
    # compiler we are going to compile with MSVC 10 instead

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "32"

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "64"

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
      PYTHON: "C:\\Python34"
      PYTHON_VERSION: "3.4.x"
      PYTHON_ARCH: "32"

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
      PYTHON: "C:\\Python34-x64"
      PYTHON_VERSION: "3.4.x"
      PYTHON_ARCH: "64"

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
      PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7.x"
      PYTHON_ARCH: "32"

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
      PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.x"
      PYTHON_ARCH: "64"

# This is so you can login via RDP to the appveyor VM. I needed
# to use this to isolate some issue with the build process for windows.
# appveyor was nice enough to not transfer over all of the registry keys for
# the build tools they have installed into the VM. So I had to locate ones
# that were available that would provide data that would identify some of the
# components needed to build openzwave and libopenzave on windows.

# when you uncomment the lines below. after the build process has completed
# failed or not the program will stop and not exit. It will display
# ip:host, username (always appveyor) and a random password. This is what is
# needed to log into the VM

# on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

deploy:
  - provider: Environment
    name: production
    on:
      APPVEYOR_REPO_TAG: true

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  #~ - ECHO "Installed SDKs:"
  #~ - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  - ECHO "Installed prgrams:"
  - ps: "ls \"C:/Program Files/\""
  - ps: "ls \"C:/Program Files (x86)/\""
  - ps: "ls \"C:/Program Files (x86)/MSBuild/\""
  - ps: "ls \"C:/Program Files (x86)/Windows Kits/\""

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "python -m pip install --disable-pip-version-check --user --upgrade pip"
  - "python -m pip install --upgrade setuptools"
  
  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  # - "%CMD_IN_ENV% pip install Cython six"
  - "python -m pip install wheel"
  - "python -m pip install Cython six"
  - "python -m pip install nose"
  - "python -m pip install twine"


  - ps: Write-Host "PYTHON_VERSION $env:PYTHON_VERSION"

  # - cmd: IF "%PYTHON_VERSION%" == "2.7.x" ( python -m pip install Louie ) ELSE ( python -m pip install PyDispatcher )

  - git clone git://github.com/OpenZWave/open-zwave.git C:\projects\python-openzwave\openzwave

build_script:
  # Build the compiled extension
  # "python pyozw_win.py"
  - "python setup.py install --flavor=dev"

test_script:
  # Run the project tests
  - "pyozw_check"
  - "nosetests --verbose tests/lib/autobuild tests/api/autobuild"

after_test:
  # If tests are successful, create binary packages for the project.
  - python setup.py bdist_wheel --flavor=dev
  #~ - "python setup.py bdist_wininst"
  #~ - "%CMD_IN_ENV% python setup.py bdist_msi"
  - ps: "ls dist"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist/*
    name: windowswheels

deploy_script:
  # upload to pypi for Windows
  - cmd: IF "%APPVEYOR_REPO_TAG%" == "true" (echo "Uploading wheels")
  - cmd: IF "%APPVEYOR_REPO_TAG%" == "true" (set HOME=%USERPROFILE%)
  - cmd: IF "%APPVEYOR_REPO_TAG%" == "true" (twine upload dist/*.whl --repository-url https://upload.pypi.org/legacy/ -u %PYPI_USER% -p %PYPI_PASSWORD%)
  - cmd: IF "%APPVEYOR_REPO_TAG%" == "true" (echo "Finished Artifact Deployment" )
